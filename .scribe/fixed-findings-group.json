[
  {
    "unsaved_vulnerability_ids": null,
    "unsaved_endpoints": [],
    "title": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running [...]",
    "severity": "High",
    "description": "**Result message:** By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\n**Snippet:**\n```\nCMD [\"sh\", \"-c\", \"python healthcheck.py & npm start\"]\n```\n**Rule name:** dockerfile.security.missing-user.missing-user\n**Rule short description:** Opengrep Finding: dockerfile.security.missing-user.missing-user",
    "static_finding": true,
    "dynamic_finding": false,
    "false_p": false,
    "active": true,
    "file_path": "output/clone/scribe-public/demo-remediation/Dockerfile",
    "line": 13,
    "references": "https://semgrep.dev/r/dockerfile.security.missing-user.missing-user",
    "vuln_id_from_tool": "dockerfile.security.missing-user.missing-user",
    "cwe": 250,
    "tags": [
      "CWE-250: Execution with Unnecessary Privileges",
      "security",
      "MEDIUM CONFIDENCE",
      "OWASP-A04:2021 - Insecure Design"
    ],
    "unique_id_from_tool": "45c1c32ad19ef9fd8608fc4a77be61296f35f89f3cf6cfecad0431e571106069c9bff7b2d5b0b14a2fd1726de7b2672bf65ae05e56ce4bdecf767b05d6594e23_0",
    "Remediation": {
      "fix_commit": "https://github.com/scribe-public/demo-remediation/commit/701f323651d3545a89d15c12874af0595d93daa7",
      "status": "fixed",
      "resolution": "Specified non-root user in Dockerfile"
    }
  },
  {
    "unsaved_vulnerability_ids": null,
    "unsaved_endpoints": [],
    "title": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query [...].",
    "severity": "High",
    "description": "**Result message:** Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\n**Snippet:**\n```\ncursor.execute(query)\n```\n**Rule name:** python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query\n**Rule short description:** Opengrep Finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
    "static_finding": true,
    "dynamic_finding": false,
    "false_p": false,
    "active": true,
    "file_path": "output/clone/scribe-public/demo-remediation/bad-file.py",
    "line": 16,
    "references": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
    "vuln_id_from_tool": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
    "cwe": 89,
    "tags": [
      "security",
      "LOW CONFIDENCE",
      "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
      "OWASP-A03:2021 - Injection",
      "OWASP-A01:2017 - Injection"
    ],
    "unique_id_from_tool": "0cc3a0834a051dd865e774260a4a1d08e17252e968dee5da76db2f34f86f00fb8146a4bd5f08b59298df7ca40f0cb264f332fd4cf0899cad766b39f2bef4ed5b_0",
    "Remediation": {
      "fix_commit": "",
      "status": "unresolved",
      "resolution": "Could not locate file to apply fix"
    }
  }
]
